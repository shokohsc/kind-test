---
apiVersion: v1
kind: Namespace
metadata:
  name: nfs
  annotations:
    linkerd.io/inject: enabled
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: kube-system
  name: node-coredns-enable
spec:
  selector:
    matchLabels:
      name: node-coredns-enable-ds
  template:
    metadata:
      labels:
        name: node-coredns-enable-ds
    spec:
      hostPID: true
      containers:
        - name: enable-coredns-on-node
          image: tristandeloche/kube-enable-coredns-on-node:0.1.0
          securityContext:
            privileged: true
          env:
            # please try true first, see if it doesn't seem to blow up your cluster, 
            # then use false if it seems to make sense with its output
            - name: 'DRY_RUN'
              value: 'false'
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: nfs
  namespace: nfs
spec:
  replicas: 1
  selector:
    role: nfs
  template:
    metadata:
      labels:
        role: nfs
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: overwatch
                operator: In
                values:
                - sombra
      containers:
      - name: nfs
        imagePullPolicy: Always
        image: shokohsc/volume-nfs
        args:
          - "/exports/WD1To"
          - "/exports/WD2To"
        ports:
          - name: nfs
            containerPort: 2049
          - name: rpcbind
            containerPort: 111
          - name: rpcbind-udp
            containerPort: 111
            protocol: UDP
          - name: mountd
            containerPort: 20048
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /exports/WD1To
            name: wd1to
          - mountPath: /exports/WD2To
            name: wd2to
      volumes:
        - name: wd1to
          hostPath:
            path: /mnt/WD1To
        - name: wd2to
          hostPath:
            path: /mnt/WD2To
---
kind: Service
apiVersion: v1
metadata:
  name: nfs
  namespace: nfs
spec:
  ports:
    - name: nfs
      port: 2049
    - name: rpcbind
      port: 111
    - name: rpcbind-udp
      port: 111
      protocol: UDP
    - name: mountd
      port: 20048
  selector:
    role: nfs


---
apiVersion: v1
kind: Namespace
metadata:
  name: commander
  annotations:
    linkerd.io/inject: enabled
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: commander
  name: commander
  namespace: commander
spec:
  replicas: 1
  selector:
    matchLabels:
      app: commander
  template:
    metadata:
      labels:
        app: commander
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: overwatch
                operator: NotIn
                values:
                - sombra
      hostname: commander
      initContainers:
      - name: myapp-container
        image: busybox:1.28
        command: ['nslookup', 'nfs.nfs.svc.cluster.local']
      containers:
      - image: coderaiser/cloudcmd
        name: commander
        volumeMounts:
            - name: wd1to
              mountPath: "/root/media/WD1To"
            - name: wd2to
              mountPath: "/root/media/WD2To"
      volumes:
      - name: wd1to
        nfs: 
          server: 10.96.143.37
          # server: nfs.nfs.svc.cluster.local
          path: /exports/WD1To
      - name: wd2to
        nfs: 
          server: 10.96.143.37
          # server: nfs.nfs.svc.cluster.local
          path: /exports/WD2To
---
kind: Service
apiVersion: v1
metadata:
  name: commander
  namespace: commander
spec:
  ports:
    - port: 80
      targetPort: 8000
  selector:
    app: commander
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  creationTimestamp: null
  name: commander
  namespace: commander
spec:
  entryPoints:
    - web
  routes:
  - kind: Rule
    match: Host(`commander.kind.shokohsc.home`)
    priority: 0
    services:
    - kind: Service
      name: commander
      port: 80
