---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nfs-wd1to
  namespace: nfs
spec:
  replicas: 1
  serviceName: nfs-wd1to
  selector:
    matchLabels:
      app: nfs-wd1to
  template:
    metadata:
      labels:
        app: nfs-wd1to
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: overwatch
                operator: In
                values:
                - sombra
      containers:
      - name: nfs
        imagePullPolicy: Always
        image: shokohsc/volume-nfs:v0.0.2
        ports:
          - name: nfs
            containerPort: 2049
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /srv
            name: wd1to
      volumes:
        - name: wd1to
          hostPath:
            path: /mnt/WD1To
---
kind: Service
apiVersion: v1
metadata:
  name: nfs-wd1to
  namespace: nfs
spec:
  ports:
    - name: nfs
      port: 2049
  selector:
    app: nfs-wd1to

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nfs-wd2to
  namespace: nfs
spec:
  replicas: 1
  serviceName: nfs-wd2to
  selector:
    matchLabels:
      app: nfs-wd2to
  template:
    metadata:
      labels:
        app: nfs-wd2to
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: overwatch
                operator: In
                values:
                - sombra
      containers:
      - name: nfs
        imagePullPolicy: Always
        image: shokohsc/volume-nfs:v0.0.2
        ports:
          - name: nfs
            containerPort: 2049
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /srv
            name: wd2to
      volumes:
        - name: wd2to
          hostPath:
            path: /mnt/WD2To
---
kind: Service
apiVersion: v1
metadata:
  name: nfs-wd2to
  namespace: nfs
spec:
  ports:
    - name: nfs
      port: 2049
  selector:
    app: nfs-wd2to

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: commander
  namespace: commander
spec:
  replicas: 1
  selector:
    matchLabels:
      app: commander
  template:
    metadata:
      labels:
        app: commander
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: overwatch
                operator: NotIn
                values:
                - sombra
      containers:
      - name: commander
        imagePullPolicy: Always
        image: coderaiser/cloudcmd
        ports:
          - name: http
            containerPort: 8000
        volumeMounts:
          - mountPath: /root/media/WD1To
            name: wd1to
          - mountPath: /root/media/WD2To
            name: wd2to
      volumes:
        - name: wd1to
          nfs:
            server: nfs-wd1to-0.nfs-wd1to.nfs.svc.cluster.local
            path: /
        - name: wd2to
          nfs:
            server: nfs-wd2to-0.nfs-wd2to.nfs.svc.cluster.local
            path: /
---
kind: Service
apiVersion: v1
metadata:
  name: commander
  namespace: commander
spec:
  ports:
    - name: http
      port: 8000
  selector:
    app: commander

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
  creationTimestamp: null
  name: commander
  namespace: commander
spec:
  entryPoints:
    - web
  routes:
  - kind: Rule
    match: Host(`commander.kind.shokohsc.home`)
    priority: 0
    services:
    - kind: Service
      name: commander
      port: 8000
